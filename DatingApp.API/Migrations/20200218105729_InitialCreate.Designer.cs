// <auto-generated />
using System;
using DatingApp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatingApp.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200218105729_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("DatingApp.API.Models.Like", b =>
                {
                    b.Property<int>("LikerId")
                        .HasColumnName("like_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LikeeId")
                        .HasColumnName("likee_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("LikerId", "LikeeId");

                    b.HasIndex("LikeeId");

                    b.ToTable("tbl_users_likes");
                });

            modelBuilder.Entity("DatingApp.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnName("date_added")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnName("descrition")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnName("is_profile_main_photo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnName("public_cloudinary_id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnName("photo_url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DatingApp.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnName("date_created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("birth_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interests")
                        .HasColumnName("interests")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnName("introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .HasColumnName("known_as")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnName("when_last_active")
                        .HasColumnType("TEXT");

                    b.Property<string>("LookingFor")
                        .HasColumnName("looking_for")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("password_salt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("tbl_system_users");
                });

            modelBuilder.Entity("DatingApp.API.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("animal_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnName("animal_name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("tbl_animals");
                });

            modelBuilder.Entity("DatingApp.API.Models.Like", b =>
                {
                    b.HasOne("DatingApp.API.Models.User", "Likee")
                        .WithMany("Likers")
                        .HasForeignKey("LikeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.User", "Liker")
                        .WithMany("Likees")
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingApp.API.Models.Photo", b =>
                {
                    b.HasOne("DatingApp.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
